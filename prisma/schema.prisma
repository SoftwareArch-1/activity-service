// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model ActivityUser {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  ownedActivities Activity[] @relation("owned")

  // https://www.prisma.io/docs/concepts/components/prisma-schema/relations/many-to-many-relations#mongodb
  joinedOtherActivityIds  String[]   @db.ObjectId
  joinedOtherActivities   Activity[] @relation(fields: [joinedOtherActivityIds], references: [id], name: "joined")
  pendingOtherActivityIds String[]   @db.ObjectId
  pendingOtherActivities  Activity[] @relation(fields: [pendingOtherActivityIds], references: [id], name: "pending")
}

model Activity {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // when creating a new activity
  name            String
  description     String
  /// @z.preprocess((arg) => {if (typeof arg == 'string' || arg instanceof Date) return new Date(arg);}, z.date())
  targetDate      DateTime
  maxParticipants Int
  requireLine     Boolean
  requireDiscord  Boolean
  tag             String
  location        String?

  owner   ActivityUser @relation(fields: [ownerId], references: [id], name: "owned")
  ownerId String

  // https://www.prisma.io/docs/concepts/components/prisma-schema/relations/many-to-many-relations#mongodb
  /// @z.preprocess((val) => val ?? [], z.array(z.string()))
  joinedUserIds  String[]       @db.ObjectId
  joinedUsers    ActivityUser[] @relation(fields: [joinedUserIds], references: [id], name: "joined")
  /// @z.preprocess((val) => val ?? [], z.array(z.string()))
  pendingUserIds String[]       @db.ObjectId
  pendingUsers   ActivityUser[] @relation(fields: [pendingUserIds], references: [id], name: "pending")
}

generator zod {
  provider = "nestjs-zod-prisma"
  output   = "../src/sync_with_activity/zod" // (default) the directory where generated zod schemas will be saved

  // relationModel = true // (default) Create and export both plain and related models.
  // relationModel         = "default" // Do not export model without relations.
  relationModel = false // Do not generate related model

  generateDto = false // (default) Generate DTOs for NestJS

  modelCase = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

  modelSuffix = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

  dtoCase = "PascalCase" // (default) Output DTOs using pascal case (ex. UserDto, PostDto)
  // dtoCase             = "camelCase" // Output DTOs using camel case (ex. userDto, postDto)

  dtoSuffix = "Dto" // (default) Suffix to apply to your prisma models when naming DTOs

  // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
  useDecimalJs = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

  // imports = null // (default) will import the referenced file in generated schemas to be used via imports.someExportedVariable

  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
  // prismaJsonNullability = false // allows null assignment to optional JSON fields
}
